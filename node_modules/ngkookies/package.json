{
  "name": "ngkookies",
  "version": "0.1.1",
  "description": "More powerful replacer for built-in Angular $cookieStore (https://github.com/angular/angular.js/issues/950)",
  "main": "ngKookies.js",
  "scripts": {
    "test": "./node_modules/karma/bin/karma start --single-run --browsers PhantomJS"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/voronianski/ngKookies.git"
  },
  "keywords": [
    "angular",
    "javascript",
    "cookies",
    "ngKookies",
    "ngCookies"
  ],
  "author": {
    "name": "Dmitri Voronianski",
    "email": "dmitri.voronianski@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/voronianski/ngKookies/issues"
  },
  "homepage": "https://github.com/voronianski/ngKookies",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "^0.7.0",
    "jasmine-core": "^2.1.3",
    "karma": "^0.12.28",
    "karma-jasmine": "^0.3.3",
    "karma-phantomjs-launcher": "^0.1.4"
  },
  "readme": "# ngKookies\n\n[![build status](http://img.shields.io/travis/voronianski/ngKookies.svg?style=flat)](https://travis-ci.org/voronianski/ngKookies)\n\n> Small provider to deal with cookies in Angular.js apps. It supports useful [options](https://github.com/voronianski/ngKookies#options) and [converter functions](https://github.com/voronianski/ngKookies#converters), replaces default [`$cookieStore`](https://docs.angularjs.org/api/ngCookies/service/$cookieStore) due to well-known limitations (https://github.com/angular/angular.js/issues/950).\n\n## Install\n\nYou can download `ngKookies` manually or install it via [bower](http://bower.io):\n\n```bash\nbower install ngkookies\n```\n\nor via [npm](https://www.npmjs.org)\n\n```bash\nnpm install ngkookies\n```\n\n## Usage\n\n### Create cookies\n\n```javascript\nvar app = angular.module('exampleApp', ['ngKookies']);\n\napp.controller('MainCtrl', function ($kookies) {\n    // 1. create session cookie\n    $kookies.set('name', 'value');\n\n    // 2. create expiring cookie\n    $kookies.set('name', 'value', {expires: 7});\n\n    // 3. Create expiring cookie, valid across entire site\n    $kookies.set('name', 'value', {expires: 7, path: '/'});\n});\n```\n\n### Read cookies\n\n```javascript\nvar app = angular.module('exampleApp', ['ngKookies']);\n\napp.controller('MainCtrl', function ($kookies) {\n    $kookies.set('name', 'value');\n\n    // read cookie\n    $kookies.get('name'); // \"value\"\n    $kookies.get('nothing'); // undefined\n\n    // read all available cookies\n    $kookies.get();\n});\n```\n\n### Delete cookies\n\n```javascript\nvar app = angular.module('exampleApp', ['ngKookies']);\n\napp.controller('MainCtrl', function ($kookies) {\n    $kookies.set('name', 'value');\n\n    // delete cookie\n    $kookies.remove('name'); // true\n    $kookies.remove('nothing'); // false\n});\n```\n\nIt is necessary to pass the exact same path, domain and secure options that were used to set the cookie, unless you're relying on the default options:\n\n```javascript\nvar app = angular.module('exampleApp', ['ngKookies']);\n\napp.controller('MainCtrl', function ($kookies) {\n    $kookies.set('name', 'value', {path: '/'});\n\n    $kookies.remove('name'); // false\n    // use the same options (path, domain) as what the cookie was written with\n    $kookies.remove('name', {path: '/'}); // true\n});\n```\n\n## Configuration\n\n##### `raw {Boolean}`\n\nBy default the cookie value is encoded/decoded when writing/reading, using `encodeURIComponent`/`decodeURIComponent`. Bypass this by setting raw to `true`.\n\n```javascript\nvar app = angular.module('exampleApp', ['ngKookies'])\n\n.config(['$kookiesProvider', \n    function ($kookiesProvider) {\n        $kookiesProvider.config.raw = true;\n    }\n]);\n```\n\n##### `json {Boolean}`\n\nTurn on automatic storage of JSON objects passed as the cookie value with angular's [`fromJson`](https://docs.angularjs.org/api/ng/function/angular.fromJson)/[`toJson`](https://docs.angularjs.org/api/ng/function/angular.toJson).\n\n```javascript\nvar app = angular.module('exampleApp', ['ngKookies'])\n\n.config(['$kookiesProvider', \n    function ($kookiesProvider) {\n        $kookiesProvider.config.json = true;\n    }\n]);\n```\n\n## Options\n\nCookie options can be set globally by setting properties of the `$.cookie.defaults` object or individually for each call to `$.cookie()` by passing a plain object to the options argument. Per-call options override the default options.\n\n##### `expires {Number|Date}` \n\nDefine lifetime of the cookie. Value can be a `Number` which will be interpreted as days from time of creation or a `Date` object. If omitted, the cookie becomes a session cookie.\n\n##### `path {String}`\n\nDefine the path where the cookie is valid. *By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior).* If you want to make it available for instance across the entire domain use `path: '/'`.\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IEâ€™s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `path: window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\n##### `domain {String}`\n\nDefine the domain where the cookie is valid. Defaults to domain of page where the cookie was created.\n\n##### `secure {Boolean}`\n\nIf `true` the cookie transmission requires a secure protocol (https). Defaults to `false`.\n\n## Converters\n\nProvide a conversion function as optional last argument for reading, in order to change the cookie's value to a different representation on the fly.\n\nExample for parsing a value into a `Number`:\n\n```javascript\n$kookies.set('foo', '42');\n$kookies.get('foo', Number); // 42\n```\n\n## References\n\n- initially ported from [jquery-cookie](https://github.com/carhartl/jquery-cookie).\n\n## License\n\nMIT Licensed\n\nCopyright (c) 2014 Dmitri Voronianski [dmitri.voronianski@gmail.com](mailto:dmitri.voronianski@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "ngkookies@0.1.1",
  "_shasum": "c8e92e32b8d52616906d8d689f86440a6b1656ed",
  "_from": "ngkookies@",
  "_resolved": "https://registry.npmjs.org/ngkookies/-/ngkookies-0.1.1.tgz"
}
